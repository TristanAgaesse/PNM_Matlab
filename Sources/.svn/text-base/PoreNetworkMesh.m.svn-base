classdef PoreNetworkMesh < PoreNetworkEuclidien
    %PoreNetworkMesh Summary of this class goes here
    %   Detailed explanation goes here
    
    properties %(SetAccess = protected, GetAccess = protected)
        Vertices
        Faces %structure, Faces{i}=tableau des vertices de la face i dans l'ordre des sommets
        NombreVertices
        CellsToVertices
        VerticeDataList
    end
    
    methods

        function pore_network_mesh=PoreNetworkMesh(dimension,faces,pores,cells_to_vertices,owners,neighbours,boundaries,vertices)
            
            nPore=length(pores);
            poreCenter=zeros(nPore,dimension);
            for iPore=1:nPore
                poreCenter(iPore,:)=mean(vertices(cells_to_vertices{iPore},:));
            end
            
            nLink=length(faces);
            linkCenter=zeros(nLink,dimension);           
            for iLink=1:nLink
                if dimension==2
                    linkCenter(iLink,:)=mean(vertices([faces{iLink}(1),faces{iLink}(2)],:));
                else
                    linkCenter(iLink,:)=mean(vertices(faces{iLink},:));
                end
            end
             
            pore_network_mesh=pore_network_mesh@PoreNetworkEuclidien(dimension,pores,owners,neighbours,boundaries,poreCenter,linkCenter);
                        
            pore_network_mesh.Vertices=vertices;
            pore_network_mesh.NombreVertices=length(vertices(:,1));
            pore_network_mesh.Faces=faces;
            pore_network_mesh.CellsToVertices=cells_to_vertices;
            dataVerticeList=DataVerticeList(pore_network_mesh.NombreVertices);
            pore_network_mesh.VerticeDataList=dataVerticeList;
        end
        
        
        
        function vertices=GetVerticesOfLink(poreNetwork,num_lien)
            if poreNetwork.GetDimension==2
                vertices=poreNetwork.Vertices([poreNetwork.Faces{num_lien}(1),poreNetwork.Faces{num_lien}(2)],:);
            else
                vertices=poreNetwork.Vertices(poreNetwork.Faces{num_lien},:);
            end
        end
        
        function vertices=GetVerticesOfPore(poreNetwork,num_pore)
            vertices=poreNetwork.Vertices(poreNetwork.CellsToVertices{num_pore},:);
        end
        
        function verticeNumber=GetVerticesOfLinkNumber(poreNetwork,numLink)
            verticeNumber=poreNetwork.Faces{numLink};
        end         
        
        function verticeNumber=GetVerticesOfPoreNumber(poreNetwork,numPore)
            verticeNumber=poreNetwork.CellsToVertices{numPore};
        end   
         
        function vertice=GetVertice(poreNetwork,numVertice)
            vertice=poreNetwork.Vertices(numVertice,:);
        end
        
        function number=GetNumberOfVertices(poreNetwork)
            number=poreNetwork.NombreVertices;
        end
        
        
        
        function dataStruct=GetVerticeDataList(poreNetwork)
            dataStruct=poreNetwork.VerticeDataList.VerticeDatas;
        end       
        
        function NewVerticeData(poreNetwork,data,name)
            poreNetwork.VerticeDataList.AddData(name,data);
        end
        
        function RemoveVerticeData(poreNetwork,name)
            poreNetwork.VerticeDataList.RemoveData(name);
        end  
        
        
        
        function center=GetPoreCenter(poreNetwork,iPore)
            center=mean(poreNetwork.GetVerticesOfPore(iPore));
        end      
        
        function center=GetLinkCenter(poreNetwork,iLink)
            center=mean(poreNetwork.GetVerticesOfLink(iLink));
        end

 
        
        
        function coord=GetAllVerticesCoordinates(poreNetwork)
            coord=poreNetwork.Vertices;
        end
        
        function output_struct=InternalOutputStruct(pore_network_mesh)
            %r�cup�ration du l'output_struct par la m�thode de la superclasse g�om�trie
            output_struct=pore_network_mesh.InternalOutputStruct@PoreNetwork;
            %ajouter champs manquants et changer ATTRIBUTE.Type
            output_struct.Vertices=pore_network_mesh.Vertices;
            output_struct.Faces.Face=pore_network_mesh.Faces;
            output_struct.ATTRIBUTE.Type='PoreNetworkUnstructuredMesh';
            output_struct.ATTRIBUTE.NombreVertices=pore_network_mesh.NombreVertices;
            output_struct.CellsToVertices=pore_network_mesh.CellsToVertices;
            
        end
        
    end
    
end
