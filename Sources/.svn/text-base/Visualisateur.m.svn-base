classdef Visualisateur
%VISUALISATEUR Visualise un réseau avec Matlab
%   Main function : Visualisateur.View
    
    properties
        NetworkStruct
    end
    
    methods
        function visualisateur=Visualisateur(output_struct)
            visualisateur.NetworkStruct=output_struct;
        end
        
        function View(visualisateur,options,varargin)
        %Input : (option, varargin)
        % 'cellules': affichage des cellules du maillage
        % 'boundaries': affichage des faces du maillage, avec code couleur pour les fronti�res
        % 'edges' : affichage des ar�tes du maillage, avec code couleur pour les fronti�res
        % 'sommets' : affichage des fibres avec des disques
        % 'liste_cellules': affiche une liste de cellules : liste_cellules=varargin{1}
        % 'cellules_pas_a_pas'
        % 'champ_cellules' : affichage d'un champ scalaire sur les cellules, champ=varargin{1}
        %
            
            
            dimension=visualisateur.NetworkStruct.ATTRIBUTE.Dimension;
            vertices=visualisateur.NetworkStruct.Vertices;
            cells_to_vertices=visualisateur.NetworkStruct.CellsToVertices;
            faces=visualisateur.NetworkStruct.Faces.Face;
            boundaries=visualisateur.NetworkStruct.Boundaries.Boundary;
            edges=visualisateur.NetworkStruct.Edges;
            
            nFace=length(faces);
            nCell=length(cells_to_vertices);
            nEdge=length(edges(:,1));
            
            %Affichage des cellules du maillage
            if strcmp('cellules',options)
                if dimension==2
                    colors=cell(1,nCell);
                    for iCell=1:nCell
                        if isempty(varargin)
                            colors{iCell}=iCell;
                        else
                            colors{iCell}=varargin{iCell};
                        end
                    end
                    for iCell = 1:nCell
                        patch(vertices(cells_to_vertices{iCell},1),vertices(cells_to_vertices{iCell},2),colors{iCell});
                    end
                elseif dimension==3
                    colors=cell(1,nFace);
                    for iLink=1:nFace
                        if isempty(varargin)
                            colors{iLink}=iLink;
                        else
                            colors{iLink}=varargin{iLink};
                        end
                    end
                    for iLink=1:nFace
                        patch(vertices(faces{iLink},1),vertices(faces{iLink},2),vertices(faces{iLink},3),colors{iLink});            
                    end
                end
            end

            %Affichage des faces du maillage, avec code
            %couleur pour les fronti�res
            if strcmp('boundaries',options)
               colors=rand(length(boundaries)+1,3);

                for num_link = 1:length(faces)
                    num_frontiere=1;
                    for j=1:length(boundaries)
                        start_face=boundaries(j).ATTRIBUTE.StartFace;
                        end_face=boundaries(j).ATTRIBUTE.StartFace+boundaries(j).ATTRIBUTE.NombreFaces-1;
                        if start_face<=num_link && num_link<=end_face
                            num_frontiere=j+1;
                        end
                    end   
                    if dimension==2
                        p=patch(vertices(faces{num_link},1),vertices(faces{num_link},2),num_frontiere);
                        set(p,'EdgeColor',colors(num_frontiere,:),'LineWidth',3);
                    elseif dimension==3
                        p=patch(vertices(faces{num_link},1),vertices(faces{num_link},2),vertices(faces{num_link},3),num_frontiere);
                    end
                end
            end

            %Affichage des ar�tes du maillage, avec code
            %couleur pour les fronti�res
            if strcmp('edges',options)
                epaisseurs=varargin{1};
                assert(length(epaisseurs)==nEdge)
                black=[0 0 0];
                for iEdge = 1:nEdge
                    if dimension==2
                        p=patch(vertices(edges(iEdge,:),1),vertices(edges(iEdge,:),2),black);
                        set(p,'LineWidth',epaisseurs(iEdge));
                    elseif dimension==3
                        p=patch(vertices(edges(iEdge,:),1),vertices(edges(iEdge,:),2),vertices(edges(iEdge,:),3),black);
                    end
                end
            end
            
            %Affichage des fibres
            if strcmp('sommets',options)
                taille_fibres=varargin{1};
                if dimension==2
                    assert(length(taille_fibres)==length(vertices(:,1)),'Input : tableau taille de chaque fibre');
                    for num_vertex=1:length(taille_fibres)
                        center=vertices(num_vertex,:);
                        radius=taille_fibres(num_vertex);
                        filledCircle(center,radius,20,[0,0,0]);
                    end
                end
            end

            %Affichage liste de cellules
            if strcmp('liste_cellules',options)
                liste_cellules=varargin{1};
                for i = 1:length(liste_cellules)
                    foo=i/length(liste_cellules);
                    
                    if length(varargin)>1
                        if strcmp('blue',varargin{2})
                            color='blue';
                        elseif strcmp('gris',varargin{2})
                            color=[foo,foo,foo];
                        elseif strcmp('white',varargin{2})
                            color=[1 1 1];
                        end
                    else
                        color='blue';
                    end
                    
                    if dimension==2
                        patch(vertices(cells_to_vertices{liste_cellules(i)},1),vertices(cells_to_vertices{liste_cellules(i)},2),color);
                    elseif dimension==3
                        patch(vertices(cells_to_vertices{liste_cellules(i)},1),vertices(cells_to_vertices{liste_cellules(i)},2),vertices(cells_to_vertices{liste_cellules(i)},3),color);            
                    end
                end
            end

            %Affichage pas � pas d'une liste ordonn�e de cellules
            if strcmp('cellules_pas_a_pas',options)
                liste_cellules=varargin{1};
                num_pas=varargin{2};
                assert(num_pas<=length(liste_cellules),'numero maximum d�pass�');

                bleu=[0,0,1];
                if dimension==2
                    patch(vertices(cells_to_vertices{liste_cellules(num_pas)},1),vertices(cells_to_vertices{liste_cellules(num_pas)},2),bleu);
                elseif dimension==3
                    patch(vertices(cells_to_vertices{liste_cellules(num_pas)},1),vertices(cells_to_vertices{liste_cellules(num_pas)},2),vertices(cells_to_vertices{liste_cellules(num_pas)},3),bleu);            
                end

            end



            %Affichage d'un champ scalaire sur les cellules
            if strcmp('champ_cellules',options)
                champ_cellules=varargin{1};
                assert(length(champ_cellules)==length(cells_to_vertices),'L''input doit donner un scalaire par cell');
                inf=min(champ_cellules(champ_cellules~=0));
                sup=max(champ_cellules(champ_cellules~=0));
                colormap(jet);
                color_foo=zeros(1,length(champ_cellules));
                for i = 1:length(champ_cellules)
                    if champ_cellules(i)~=0
                        %foo=1-(champ_cellules(i)-inf)/(sup-inf);
                        foo=(champ_cellules(i)-inf)/(sup-inf);
                        color_foo(i)=foo;
                    else
                        color_foo(i)=1;
                    end
                end
%                                 color_foo=imadjust ([color_foo',color_foo',color_foo']); %augmentation du contraste
%                                 color_foo=color_foo(:,1);
                colors=cell(1,length(champ_cellules));
                for i = 1:length(champ_cellules)
                    if champ_cellules(i)~=0
                        colors{i}=color_foo(i);
                        %colors{i}=64*color_foo(i);
                    else
                        colors{i}=[1,1,1];
                    end
                end
                for i = 1:length(champ_cellules)
                    if dimension==2
                        patch(vertices(cells_to_vertices{i},1),vertices(cells_to_vertices{i},2),colors{i});
                    elseif dimension==3
                        patch(vertices(cells_to_vertices{i},1),vertices(cells_to_vertices{i},2),vertices(cells_to_vertices{i},3),colors{i});            
                    end
                end
            end
     
        end
        
        
    end
    
end

